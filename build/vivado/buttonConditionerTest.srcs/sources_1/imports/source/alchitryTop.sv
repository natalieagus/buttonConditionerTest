/*
    This file was generated automatically by Alchitry Labs 2.0.16-BETA.
    Do not edit this file directly. Instead edit the original Lucid source.
    This is a temporary file and any changes made to it will be destroyed.
*/
module alchitryTop (
    input clk,
    input rstN,
    output reg [(8)-1:0] led,
    input usbRx,
    output reg usbTx,
    output reg [(24)-1:0] ioLed,
    output reg [(8)-1:0] ioSeg,
    output reg [(4)-1:0] ioSel,
    input [(5)-1:0] ioButton,
    input [(24)-1:0] ioDip
  );
  localparam CLK_FREQ = 24'h989680;
  
  
  reg rst;
  
  localparam _MP_STAGES_1210062975 = 3'h4;
  reg M_resetCond_in;
  wire M_resetCond_out;
  
  resetConditioner #(
    .STAGES(_MP_STAGES_1210062975)
  ) resetCond (
    .clk(clk),
    .in(M_resetCond_in),
    .out(M_resetCond_out)
  );
  
  localparam _MP_CLK_FREQ_799895611 = 24'h989680;
  localparam _MP_MIN_DELAY_799895611 = 5'h14;
  localparam _MP_NUM_SYNC_799895611 = 2'h2;
  reg M_buttonCond0_in;
  wire M_buttonCond0_out;
  
  buttonConditioner #(
    .CLK_FREQ(_MP_CLK_FREQ_799895611),
    .MIN_DELAY(_MP_MIN_DELAY_799895611),
    .NUM_SYNC(_MP_NUM_SYNC_799895611)
  ) buttonCond0 (
    .clk(clk),
    .in(M_buttonCond0_in),
    .out(M_buttonCond0_out)
  );
  
  localparam _MP_CLK_FREQ_1160996601 = 24'h989680;
  localparam _MP_MIN_DELAY_1160996601 = 5'h14;
  localparam _MP_NUM_SYNC_1160996601 = 2'h2;
  reg M_buttonCond1_in;
  wire M_buttonCond1_out;
  
  buttonConditioner #(
    .CLK_FREQ(_MP_CLK_FREQ_1160996601),
    .MIN_DELAY(_MP_MIN_DELAY_1160996601),
    .NUM_SYNC(_MP_NUM_SYNC_1160996601)
  ) buttonCond1 (
    .clk(clk),
    .in(M_buttonCond1_in),
    .out(M_buttonCond1_out)
  );
  
  localparam _MP_CLK_FREQ_1558328094 = 24'h989680;
  localparam _MP_MIN_DELAY_1558328094 = 5'h14;
  localparam _MP_NUM_SYNC_1558328094 = 2'h2;
  reg M_buttonCond2_in;
  wire M_buttonCond2_out;
  
  buttonConditioner #(
    .CLK_FREQ(_MP_CLK_FREQ_1558328094),
    .MIN_DELAY(_MP_MIN_DELAY_1558328094),
    .NUM_SYNC(_MP_NUM_SYNC_1558328094)
  ) buttonCond2 (
    .clk(clk),
    .in(M_buttonCond2_in),
    .out(M_buttonCond2_out)
  );
  
  localparam _MP_CLK_FREQ_1423139114 = 24'h989680;
  localparam _MP_MIN_DELAY_1423139114 = 5'h14;
  localparam _MP_NUM_SYNC_1423139114 = 2'h2;
  reg M_buttonCond3_in;
  wire M_buttonCond3_out;
  
  buttonConditioner #(
    .CLK_FREQ(_MP_CLK_FREQ_1423139114),
    .MIN_DELAY(_MP_MIN_DELAY_1423139114),
    .NUM_SYNC(_MP_NUM_SYNC_1423139114)
  ) buttonCond3 (
    .clk(clk),
    .in(M_buttonCond3_in),
    .out(M_buttonCond3_out)
  );
  
  localparam _MP_CLK_FREQ_1559991698 = 24'h989680;
  localparam _MP_MIN_DELAY_1559991698 = 5'h14;
  localparam _MP_NUM_SYNC_1559991698 = 2'h2;
  reg M_buttonCond4_in;
  wire M_buttonCond4_out;
  
  buttonConditioner #(
    .CLK_FREQ(_MP_CLK_FREQ_1559991698),
    .MIN_DELAY(_MP_MIN_DELAY_1559991698),
    .NUM_SYNC(_MP_NUM_SYNC_1559991698)
  ) buttonCond4 (
    .clk(clk),
    .in(M_buttonCond4_in),
    .out(M_buttonCond4_out)
  );
  
  localparam _MP_CLK_FREQ_35730522 = 120'h989680989680989680989680989680;
  localparam _MP_MIN_DELAY_35730522 = 5'h14;
  localparam _MP_NUM_SYNC_35730522 = 2'h2;
  reg [(5)-1:0] M_ioButtonCondTest1_in;
  wire [(5)-1:0] M_ioButtonCondTest1_out;
  
  genvar idx_0_35730522;
  
  generate
    for (idx_0_35730522 = 0; idx_0_35730522 < 5; idx_0_35730522 = idx_0_35730522 + 1) begin: forLoop_idx_0_35730522
      buttonConditioner #(
        .CLK_FREQ(_MP_CLK_FREQ_35730522),
        .MIN_DELAY(_MP_MIN_DELAY_35730522),
        .NUM_SYNC(_MP_NUM_SYNC_35730522)
      ) ioButtonCondTest1_idx_0_35730522 (
        .clk(clk),
        .in(M_ioButtonCondTest1_in[(idx_0_35730522)]),
        .out(M_ioButtonCondTest1_out[(idx_0_35730522)])
      );
    end
  endgenerate
  
  localparam _MP_CLK_FREQ_1326882243 = 120'h989680989680989680989680989680;
  localparam _MP_MIN_DELAY_1326882243 = 5'h14;
  localparam _MP_NUM_SYNC_1326882243 = 2'h2;
  reg [(5)-1:0] M_ioButtonCondTest2_in;
  wire [(5)-1:0] M_ioButtonCondTest2_out;
  
  genvar idx_0_1326882243;
  
  generate
    for (idx_0_1326882243 = 0; idx_0_1326882243 < 5; idx_0_1326882243 = idx_0_1326882243 + 1) begin: forLoop_idx_0_1326882243
      buttonConditioner #(
        .CLK_FREQ(_MP_CLK_FREQ_1326882243),
        .MIN_DELAY(_MP_MIN_DELAY_1326882243),
        .NUM_SYNC(_MP_NUM_SYNC_1326882243)
      ) ioButtonCondTest2_idx_0_1326882243 (
        .clk(clk),
        .in(M_ioButtonCondTest2_in[(idx_0_1326882243)]),
        .out(M_ioButtonCondTest2_out[(idx_0_1326882243)])
      );
    end
  endgenerate
  
  
  always @* begin
    M_resetCond_in = ~rstN;
    rst = M_resetCond_out;
    led = {rst, 7'h0};
    usbTx = usbRx;
    M_buttonCond0_in = ioButton[(1'h0)];
    M_buttonCond1_in = ioButton[(1'h1)];
    M_buttonCond2_in = ioButton[(2'h2)];
    M_buttonCond3_in = ioButton[(2'h3)];
    M_buttonCond4_in = ioButton[(3'h4)];
    M_ioButtonCondTest1_in = ioButton;
    M_ioButtonCondTest2_in = ioButton;
    ioSeg = 8'h0;
    ioSel = 4'h0;
    ioLed = 24'hffffff;
    ioLed[(1'h0)*(8)+(8) - 1 -:(8)] = {3'h0, M_buttonCond4_out, M_buttonCond3_out, M_buttonCond2_out, M_buttonCond1_out, M_buttonCond0_out};
    ioLed[(1'h1)*(8)+(8) - 1 -:(8)] = {3'h0, M_ioButtonCondTest1_out};
    ioLed[(2'h2)*(8)+(8) - 1 -:(8)] = {3'h0, M_ioButtonCondTest2_out};
  end
  
endmodule