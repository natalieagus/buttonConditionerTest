module alchitryTop (
    input clk,              // 100MHz clock
    input rstN,            // reset button (active low)
    output led[8],          // 8 user controllable LEDs
    input usbRx,            // USB->Serial input
    output usbTx,           // USB->Serial output
    output ioLed[3][8],     // LEDs on IO Shield
    output ioSeg[8],        // 7-segment LEDs on IO Shield
    output ioSel[4],        // Digit select on IO Shield
    input ioButton[5],      // 5 buttons on IO Shield
    input ioDip[3][8]       // DIP switches on IO Shield
) {

    sig rst                 // reset signal
    const CLK_FREQ = $isSim() ? 1000 : 10000000 // put 1000 for sim, 10M on hardware
    .clk(clk) {
        // The reset conditioner is used to synchronize the reset signal to the FPGA
        // clock. This ensures the entire FPGA comes out of reset at the same time.
        resetConditioner resetCond
        // these works with hardware and sim
        buttonConditioner buttonCond0(#CLK_FREQ($isSim() ? 1000 : 10000000))
        buttonConditioner buttonCond1(#CLK_FREQ($isSim() ? 1000 : 10000000))
        buttonConditioner buttonCond2(#CLK_FREQ($isSim() ? 1000 : 10000000))
        buttonConditioner buttonCond3(#CLK_FREQ($isSim() ? 1000 : 10000000))
        buttonConditioner buttonCond4(#CLK_FREQ($isSim() ? 1000 : 10000000))
        
        // these did not work with hardware, only sim
        buttonConditioner ioButtonCondTest1[5](#CLK_FREQ(5x{{CLK_FREQ}})) 
        buttonConditioner ioButtonCondTest2[5](#CLK_FREQ({CLK_FREQ,CLK_FREQ,CLK_FREQ,CLK_FREQ,CLK_FREQ})) 
    }

    always {
        resetCond.in = ~rstN  // input raw inverted reset signal
        rst = resetCond.out    // conditioned reset

        led = c{rst,7h00}     // connect rst to the last LED

        usbTx = usbRx          // echo the serial data
        buttonCond0.in = ioButton[0]
        buttonCond1.in = ioButton[1]
        buttonCond2.in = ioButton[2]
        buttonCond3.in = ioButton[3]
        buttonCond4.in = ioButton[4]
        ioButtonCondTest1.in = ioButton
        ioButtonCondTest2.in = ioButton
        
        ioSeg = 8h0
        ioSel = 4h0
        ioLed = 3x{{8hFF}}
        ioLed[0] = c{3b0, buttonCond4.out,buttonCond3.out, buttonCond2.out, buttonCond1.out, buttonCond0.out}
        ioLed[1] = c{3b0, ioButtonCondTest1.out}
        ioLed[2] = c{3b0, ioButtonCondTest2.out}
    }
}